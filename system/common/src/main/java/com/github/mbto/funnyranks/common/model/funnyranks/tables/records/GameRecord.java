/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks.tables.records;


import com.github.mbto.funnyranks.common.model.funnyranks.tables.Game;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameRecord extends UpdatableRecordImpl<GameRecord> implements Record3<UInteger, String, UShort> {

    private static final long serialVersionUID = -781127197;

    /**
     * Setter for <code>funnyranks.game.app_id</code>. Steam application id for converting/validating UDP datagrams from https://developer.valvesoftware.com/wiki/Steam_Application_IDs#Server_Files
     */
    public void setAppId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>funnyranks.game.app_id</code>. Steam application id for converting/validating UDP datagrams from https://developer.valvesoftware.com/wiki/Steam_Application_IDs#Server_Files
     */
    @NotNull
    public UInteger getAppId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>funnyranks.game.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>funnyranks.game.name</code>.
     */
    @NotNull
    @Size(max = 100)
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>funnyranks.game.listener_port</code>. UDP port for consuming game server logs
     */
    public void setListenerPort(UShort value) {
        set(2, value);
    }

    /**
     * Getter for <code>funnyranks.game.listener_port</code>. UDP port for consuming game server logs
     */
    @NotNull
    public UShort getListenerPort() {
        return (UShort) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<UInteger, String, UShort> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<UInteger, String, UShort> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field1() {
        return Game.GAME.APP_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Game.GAME.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UShort> field3() {
        return Game.GAME.LISTENER_PORT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component1() {
        return getAppId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UShort component3() {
        return getListenerPort();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value1() {
        return getAppId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UShort value3() {
        return getListenerPort();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GameRecord value1(UInteger value) {
        setAppId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GameRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GameRecord value3(UShort value) {
        setListenerPort(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GameRecord values(UInteger value1, String value2, UShort value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GameRecord
     */
    public GameRecord() {
        super(Game.GAME);
    }

    /**
     * Create a detached, initialised GameRecord
     */
    public GameRecord(UInteger appId, String name, UShort listenerPort) {
        super(Game.GAME);

        set(0, appId);
        set(1, name);
        set(2, listenerPort);
    }
}
