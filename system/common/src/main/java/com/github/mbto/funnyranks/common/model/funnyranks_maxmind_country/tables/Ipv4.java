/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks_maxmind_country.tables;


import com.github.mbto.funnyranks.common.model.funnyranks_maxmind_country.FunnyranksMaxmindCountry;
import com.github.mbto.funnyranks.common.model.funnyranks_maxmind_country.Indexes;
import com.github.mbto.funnyranks.common.model.funnyranks_maxmind_country.Keys;
import com.github.mbto.funnyranks.common.model.funnyranks_maxmind_country.tables.records.Ipv4Record;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ipv4 extends TableImpl<Ipv4Record> {

    private static final long serialVersionUID = -728460830;

    /**
     * The reference instance of <code>funnyranks_maxmind_country.ipv4</code>
     */
    public static final Ipv4 IPV4 = new Ipv4();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Ipv4Record> getRecordType() {
        return Ipv4Record.class;
    }

    /**
     * The column <code>funnyranks_maxmind_country.ipv4.start_int</code>.
     */
    public final TableField<Ipv4Record, UInteger> START_INT = createField("start_int", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>funnyranks_maxmind_country.ipv4.last_int</code>.
     */
    public final TableField<Ipv4Record, UInteger> LAST_INT = createField("last_int", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>funnyranks_maxmind_country.ipv4.v_geoname_id</code>. One of valid geoname_id (from ipblocks_priority_geonameId_groupNames setting)
     */
    public final TableField<Ipv4Record, UInteger> V_GEONAME_ID = createField("v_geoname_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "One of valid geoname_id (from ipblocks_priority_geonameId_groupNames setting)");

    /**
     * Create a <code>funnyranks_maxmind_country.ipv4</code> table reference
     */
    public Ipv4() {
        this(DSL.name("ipv4"), null);
    }

    /**
     * Create an aliased <code>funnyranks_maxmind_country.ipv4</code> table reference
     */
    public Ipv4(String alias) {
        this(DSL.name(alias), IPV4);
    }

    /**
     * Create an aliased <code>funnyranks_maxmind_country.ipv4</code> table reference
     */
    public Ipv4(Name alias) {
        this(alias, IPV4);
    }

    private Ipv4(Name alias, Table<Ipv4Record> aliased) {
        this(alias, aliased, null);
    }

    private Ipv4(Name alias, Table<Ipv4Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Ipv4(Table<O> child, ForeignKey<O, Ipv4Record> key) {
        super(child, key, IPV4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FunnyranksMaxmindCountry.FUNNYRANKS_MAXMIND_COUNTRY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IPV4_IPV4_LAST_INT_UNIQUE, Indexes.IPV4_IPV4_START_INT_UNIQUE, Indexes.IPV4_IPV4_V_GEONAME_ID_FK_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Ipv4Record>> getKeys() {
        return Arrays.<UniqueKey<Ipv4Record>>asList(Keys.KEY_IPV4_IPV4_START_INT_UNIQUE, Keys.KEY_IPV4_IPV4_LAST_INT_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Ipv4Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Ipv4Record, ?>>asList(Keys.IPV4_V_GEONAME_ID_FK);
    }

    public Country country() {
        return new Country(this, Keys.IPV4_V_GEONAME_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ipv4 as(String alias) {
        return new Ipv4(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ipv4 as(Name alias) {
        return new Ipv4(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ipv4 rename(String name) {
        return new Ipv4(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ipv4 rename(Name name) {
        return new Ipv4(name, null);
    }
}
