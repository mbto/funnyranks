/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks;


import com.github.mbto.funnyranks.common.model.funnyranks.tables.Broker;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.DriverProperty;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.Game;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.Manager;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.Port;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.Project;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.BrokerRecord;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.DriverPropertyRecord;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.GameRecord;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.ManagerRecord;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.PortRecord;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.ProjectRecord;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;
import org.jooq.types.UInteger;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>funnyranks</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<BrokerRecord, UInteger> IDENTITY_BROKER = Identities0.IDENTITY_BROKER;
    public static final Identity<DriverPropertyRecord, UInteger> IDENTITY_DRIVER_PROPERTY = Identities0.IDENTITY_DRIVER_PROPERTY;
    public static final Identity<ManagerRecord, UInteger> IDENTITY_MANAGER = Identities0.IDENTITY_MANAGER;
    public static final Identity<PortRecord, UInteger> IDENTITY_PORT = Identities0.IDENTITY_PORT;
    public static final Identity<ProjectRecord, UInteger> IDENTITY_PROJECT = Identities0.IDENTITY_PROJECT;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BrokerRecord> KEY_BROKER_PRIMARY = UniqueKeys0.KEY_BROKER_PRIMARY;
    public static final UniqueKey<BrokerRecord> KEY_BROKER_BROKER_NAME_UNIQUE = UniqueKeys0.KEY_BROKER_BROKER_NAME_UNIQUE;
    public static final UniqueKey<DriverPropertyRecord> KEY_DRIVER_PROPERTY_PRIMARY = UniqueKeys0.KEY_DRIVER_PROPERTY_PRIMARY;
    public static final UniqueKey<GameRecord> KEY_GAME_PRIMARY = UniqueKeys0.KEY_GAME_PRIMARY;
    public static final UniqueKey<GameRecord> KEY_GAME_GAME_LISTENER_PORT_UNIQUE = UniqueKeys0.KEY_GAME_GAME_LISTENER_PORT_UNIQUE;
    public static final UniqueKey<ManagerRecord> KEY_MANAGER_PRIMARY = UniqueKeys0.KEY_MANAGER_PRIMARY;
    public static final UniqueKey<ManagerRecord> KEY_MANAGER_MANAGER_USERNAME_UNIQUE = UniqueKeys0.KEY_MANAGER_MANAGER_USERNAME_UNIQUE;
    public static final UniqueKey<PortRecord> KEY_PORT_PRIMARY = UniqueKeys0.KEY_PORT_PRIMARY;
    public static final UniqueKey<ProjectRecord> KEY_PROJECT_PRIMARY = UniqueKeys0.KEY_PROJECT_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DriverPropertyRecord, ProjectRecord> DRIVER_PROPERTY_PROJECT_ID_FK = ForeignKeys0.DRIVER_PROPERTY_PROJECT_ID_FK;
    public static final ForeignKey<PortRecord, BrokerRecord> PORT_BROKER_ID_FK = ForeignKeys0.PORT_BROKER_ID_FK;
    public static final ForeignKey<PortRecord, ProjectRecord> PORT_PROJECT_ID_FK = ForeignKeys0.PORT_PROJECT_ID_FK;
    public static final ForeignKey<PortRecord, GameRecord> PORT_GAME_APP_ID_FK = ForeignKeys0.PORT_GAME_APP_ID_FK;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<BrokerRecord, UInteger> IDENTITY_BROKER = Internal.createIdentity(Broker.BROKER, Broker.BROKER.ID);
        public static Identity<DriverPropertyRecord, UInteger> IDENTITY_DRIVER_PROPERTY = Internal.createIdentity(DriverProperty.DRIVER_PROPERTY, DriverProperty.DRIVER_PROPERTY.ID);
        public static Identity<ManagerRecord, UInteger> IDENTITY_MANAGER = Internal.createIdentity(Manager.MANAGER, Manager.MANAGER.ID);
        public static Identity<PortRecord, UInteger> IDENTITY_PORT = Internal.createIdentity(Port.PORT, Port.PORT.ID);
        public static Identity<ProjectRecord, UInteger> IDENTITY_PROJECT = Internal.createIdentity(Project.PROJECT, Project.PROJECT.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<BrokerRecord> KEY_BROKER_PRIMARY = Internal.createUniqueKey(Broker.BROKER, "KEY_broker_PRIMARY", Broker.BROKER.ID);
        public static final UniqueKey<BrokerRecord> KEY_BROKER_BROKER_NAME_UNIQUE = Internal.createUniqueKey(Broker.BROKER, "KEY_broker_broker_name_UNIQUE", Broker.BROKER.NAME);
        public static final UniqueKey<DriverPropertyRecord> KEY_DRIVER_PROPERTY_PRIMARY = Internal.createUniqueKey(DriverProperty.DRIVER_PROPERTY, "KEY_driver_property_PRIMARY", DriverProperty.DRIVER_PROPERTY.ID);
        public static final UniqueKey<GameRecord> KEY_GAME_PRIMARY = Internal.createUniqueKey(Game.GAME, "KEY_game_PRIMARY", Game.GAME.APP_ID);
        public static final UniqueKey<GameRecord> KEY_GAME_GAME_LISTENER_PORT_UNIQUE = Internal.createUniqueKey(Game.GAME, "KEY_game_game_listener_port_UNIQUE", Game.GAME.LISTENER_PORT);
        public static final UniqueKey<ManagerRecord> KEY_MANAGER_PRIMARY = Internal.createUniqueKey(Manager.MANAGER, "KEY_manager_PRIMARY", Manager.MANAGER.ID);
        public static final UniqueKey<ManagerRecord> KEY_MANAGER_MANAGER_USERNAME_UNIQUE = Internal.createUniqueKey(Manager.MANAGER, "KEY_manager_manager_username_UNIQUE", Manager.MANAGER.USERNAME);
        public static final UniqueKey<PortRecord> KEY_PORT_PRIMARY = Internal.createUniqueKey(Port.PORT, "KEY_port_PRIMARY", Port.PORT.ID);
        public static final UniqueKey<ProjectRecord> KEY_PROJECT_PRIMARY = Internal.createUniqueKey(Project.PROJECT, "KEY_project_PRIMARY", Project.PROJECT.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<DriverPropertyRecord, ProjectRecord> DRIVER_PROPERTY_PROJECT_ID_FK = Internal.createForeignKey(com.github.mbto.funnyranks.common.model.funnyranks.Keys.KEY_PROJECT_PRIMARY, DriverProperty.DRIVER_PROPERTY, "driver_property_project_id_fk", DriverProperty.DRIVER_PROPERTY.PROJECT_ID);
        public static final ForeignKey<PortRecord, BrokerRecord> PORT_BROKER_ID_FK = Internal.createForeignKey(com.github.mbto.funnyranks.common.model.funnyranks.Keys.KEY_BROKER_PRIMARY, Port.PORT, "port_broker_id_fk", Port.PORT.BROKER_ID);
        public static final ForeignKey<PortRecord, ProjectRecord> PORT_PROJECT_ID_FK = Internal.createForeignKey(com.github.mbto.funnyranks.common.model.funnyranks.Keys.KEY_PROJECT_PRIMARY, Port.PORT, "port_project_id_fk", Port.PORT.PROJECT_ID);
        public static final ForeignKey<PortRecord, GameRecord> PORT_GAME_APP_ID_FK = Internal.createForeignKey(com.github.mbto.funnyranks.common.model.funnyranks.Keys.KEY_GAME_PRIMARY, Port.PORT, "port_game_app_id_fk", Port.PORT.GAME_APP_ID);
    }
}
