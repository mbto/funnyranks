/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks.tables;


import com.github.mbto.funnyranks.common.model.funnyranks.Funnyranks;
import com.github.mbto.funnyranks.common.model.funnyranks.Indexes;
import com.github.mbto.funnyranks.common.model.funnyranks.Keys;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.BrokerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Broker extends TableImpl<BrokerRecord> {

    private static final long serialVersionUID = -345381373;

    /**
     * The reference instance of <code>funnyranks.broker</code>
     */
    public static final Broker BROKER = new Broker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrokerRecord> getRecordType() {
        return BrokerRecord.class;
    }

    /**
     * The column <code>funnyranks.broker.id</code>.
     */
    public final TableField<BrokerRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>funnyranks.broker.name</code>. broker name from application.properties
     */
    public final TableField<BrokerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "broker name from application.properties");

    /**
     * The column <code>funnyranks.broker.description</code>.
     */
    public final TableField<BrokerRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>funnyranks.broker.reg_datetime</code>.
     */
    public final TableField<BrokerRecord, LocalDateTime> REG_DATETIME = createField("reg_datetime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>funnyranks.broker</code> table reference
     */
    public Broker() {
        this(DSL.name("broker"), null);
    }

    /**
     * Create an aliased <code>funnyranks.broker</code> table reference
     */
    public Broker(String alias) {
        this(DSL.name(alias), BROKER);
    }

    /**
     * Create an aliased <code>funnyranks.broker</code> table reference
     */
    public Broker(Name alias) {
        this(alias, BROKER);
    }

    private Broker(Name alias, Table<BrokerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Broker(Name alias, Table<BrokerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Broker(Table<O> child, ForeignKey<O, BrokerRecord> key) {
        super(child, key, BROKER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Funnyranks.FUNNYRANKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BROKER_BROKER_NAME_UNIQUE, Indexes.BROKER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BrokerRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_BROKER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BrokerRecord> getPrimaryKey() {
        return Keys.KEY_BROKER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BrokerRecord>> getKeys() {
        return Arrays.<UniqueKey<BrokerRecord>>asList(Keys.KEY_BROKER_PRIMARY, Keys.KEY_BROKER_BROKER_NAME_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Broker as(String alias) {
        return new Broker(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Broker as(Name alias) {
        return new Broker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Broker rename(String name) {
        return new Broker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Broker rename(Name name) {
        return new Broker(name, null);
    }
}
