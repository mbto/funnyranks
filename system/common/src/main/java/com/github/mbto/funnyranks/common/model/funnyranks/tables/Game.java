/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks.tables;


import com.github.mbto.funnyranks.common.model.funnyranks.Funnyranks;
import com.github.mbto.funnyranks.common.model.funnyranks.Indexes;
import com.github.mbto.funnyranks.common.model.funnyranks.Keys;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.GameRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Game extends TableImpl<GameRecord> {

    private static final long serialVersionUID = -1064031422;

    /**
     * The reference instance of <code>funnyranks.game</code>
     */
    public static final Game GAME = new Game();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameRecord> getRecordType() {
        return GameRecord.class;
    }

    /**
     * The column <code>funnyranks.game.app_id</code>. Steam application id for converting/validating UDP datagrams from https://developer.valvesoftware.com/wiki/Steam_Application_IDs#Server_Files
     */
    public final TableField<GameRecord, UInteger> APP_ID = createField("app_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "Steam application id for converting/validating UDP datagrams from https://developer.valvesoftware.com/wiki/Steam_Application_IDs#Server_Files");

    /**
     * The column <code>funnyranks.game.name</code>.
     */
    public final TableField<GameRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>funnyranks.game.listener_port</code>. UDP port for consuming game server logs
     */
    public final TableField<GameRecord, UShort> LISTENER_PORT = createField("listener_port", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "UDP port for consuming game server logs");

    /**
     * Create a <code>funnyranks.game</code> table reference
     */
    public Game() {
        this(DSL.name("game"), null);
    }

    /**
     * Create an aliased <code>funnyranks.game</code> table reference
     */
    public Game(String alias) {
        this(DSL.name(alias), GAME);
    }

    /**
     * Create an aliased <code>funnyranks.game</code> table reference
     */
    public Game(Name alias) {
        this(alias, GAME);
    }

    private Game(Name alias, Table<GameRecord> aliased) {
        this(alias, aliased, null);
    }

    private Game(Name alias, Table<GameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Game(Table<O> child, ForeignKey<O, GameRecord> key) {
        super(child, key, GAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Funnyranks.FUNNYRANKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GAME_GAME_LISTENER_PORT_UNIQUE, Indexes.GAME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GameRecord> getPrimaryKey() {
        return Keys.KEY_GAME_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GameRecord>> getKeys() {
        return Arrays.<UniqueKey<GameRecord>>asList(Keys.KEY_GAME_PRIMARY, Keys.KEY_GAME_GAME_LISTENER_PORT_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Game as(String alias) {
        return new Game(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Game as(Name alias) {
        return new Game(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(String name) {
        return new Game(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(Name name) {
        return new Game(name, null);
    }
}
