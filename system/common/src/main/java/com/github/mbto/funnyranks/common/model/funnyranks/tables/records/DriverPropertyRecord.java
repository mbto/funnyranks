/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks.tables.records;


import com.github.mbto.funnyranks.common.model.funnyranks.tables.DriverProperty;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * Additional JDBC driver connection properties https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DriverPropertyRecord extends UpdatableRecordImpl<DriverPropertyRecord> implements Record4<UInteger, UInteger, String, String> {

    private static final long serialVersionUID = 1466660529;

    /**
     * Setter for <code>funnyranks.driver_property.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>funnyranks.driver_property.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>funnyranks.driver_property.project_id</code>.
     */
    public void setProjectId(UInteger value) {
        set(1, value);
    }

    /**
     * Getter for <code>funnyranks.driver_property.project_id</code>.
     */
    @NotNull
    public UInteger getProjectId() {
        return (UInteger) get(1);
    }

    /**
     * Setter for <code>funnyranks.driver_property.key</code>.
     */
    public void setKey(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>funnyranks.driver_property.key</code>.
     */
    @NotNull
    @Size(max = 255)
    public String getKey() {
        return (String) get(2);
    }

    /**
     * Setter for <code>funnyranks.driver_property.value</code>.
     */
    public void setValue(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>funnyranks.driver_property.value</code>.
     */
    @NotNull
    @Size(max = 255)
    public String getValue() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<UInteger, UInteger, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<UInteger, UInteger, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field1() {
        return DriverProperty.DRIVER_PROPERTY.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field2() {
        return DriverProperty.DRIVER_PROPERTY.PROJECT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return DriverProperty.DRIVER_PROPERTY.KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return DriverProperty.DRIVER_PROPERTY.VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component2() {
        return getProjectId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value2() {
        return getProjectId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DriverPropertyRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DriverPropertyRecord value2(UInteger value) {
        setProjectId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DriverPropertyRecord value3(String value) {
        setKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DriverPropertyRecord value4(String value) {
        setValue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DriverPropertyRecord values(UInteger value1, UInteger value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DriverPropertyRecord
     */
    public DriverPropertyRecord() {
        super(DriverProperty.DRIVER_PROPERTY);
    }

    /**
     * Create a detached, initialised DriverPropertyRecord
     */
    public DriverPropertyRecord(UInteger id, UInteger projectId, String key, String value) {
        super(DriverProperty.DRIVER_PROPERTY);

        set(0, id);
        set(1, projectId);
        set(2, key);
        set(3, value);
    }
}
