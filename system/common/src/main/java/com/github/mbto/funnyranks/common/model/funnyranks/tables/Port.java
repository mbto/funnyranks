/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks.tables;


import com.github.mbto.funnyranks.common.model.funnyranks.Funnyranks;
import com.github.mbto.funnyranks.common.model.funnyranks.Indexes;
import com.github.mbto.funnyranks.common.model.funnyranks.Keys;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.PortRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Port extends TableImpl<PortRecord> {

    private static final long serialVersionUID = 1296230192;

    /**
     * The reference instance of <code>funnyranks.port</code>
     */
    public static final Port PORT = new Port();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortRecord> getRecordType() {
        return PortRecord.class;
    }

    /**
     * The column <code>funnyranks.port.id</code>.
     */
    public final TableField<PortRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>funnyranks.port.broker_id</code>.
     */
    public final TableField<PortRecord, UInteger> BROKER_ID = createField("broker_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>funnyranks.port.project_id</code>.
     */
    public final TableField<PortRecord, UInteger> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>funnyranks.port.game_app_id</code>.
     */
    public final TableField<PortRecord, UInteger> GAME_APP_ID = createField("game_app_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>funnyranks.port.value</code>. Local port of game server from which logs will be received
     */
    public final TableField<PortRecord, UShort> VALUE = createField("value", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "Local port of game server from which logs will be received");

    /**
     * The column <code>funnyranks.port.name</code>.
     */
    public final TableField<PortRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(31).nullable(false), this, "");

    /**
     * The column <code>funnyranks.port.active</code>. Should receive packets from this port?: 1-receive; 0-UDP packets from this port will be ignored
     */
    public final TableField<PortRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Should receive packets from this port?: 1-receive; 0-UDP packets from this port will be ignored");

    /**
     * The column <code>funnyranks.port.ffa</code>. game server is FREE-FOR-ALL mode (Example: CS-DeathMatch): 1-true; 0-false
     */
    public final TableField<PortRecord, Boolean> FFA = createField("ffa", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "game server is FREE-FOR-ALL mode (Example: CS-DeathMatch): 1-true; 0-false");

    /**
     * The column <code>funnyranks.port.ignore_bots</code>. 1-ignore statistics, when killer or victim is BOT; 0-don't ignore (include all player's)
     */
    public final TableField<PortRecord, Boolean> IGNORE_BOTS = createField("ignore_bots", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "1-ignore statistics, when killer or victim is BOT; 0-don't ignore (include all player's)");

    /**
     * The column <code>funnyranks.port.start_session_on_action</code>. 1-start player's session on event "... killed ... with ..." (not for kreedz servers); 0-start player's session on event "... connected, address ..." or "... entered the game"
     */
    public final TableField<PortRecord, Boolean> START_SESSION_ON_ACTION = createField("start_session_on_action", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "1-start player's session on event \"... killed ... with ...\" (not for kreedz servers); 0-start player's session on event \"... connected, address ...\" or \"... entered the game\"");

    /**
     * Create a <code>funnyranks.port</code> table reference
     */
    public Port() {
        this(DSL.name("port"), null);
    }

    /**
     * Create an aliased <code>funnyranks.port</code> table reference
     */
    public Port(String alias) {
        this(DSL.name(alias), PORT);
    }

    /**
     * Create an aliased <code>funnyranks.port</code> table reference
     */
    public Port(Name alias) {
        this(alias, PORT);
    }

    private Port(Name alias, Table<PortRecord> aliased) {
        this(alias, aliased, null);
    }

    private Port(Name alias, Table<PortRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Port(Table<O> child, ForeignKey<O, PortRecord> key) {
        super(child, key, PORT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Funnyranks.FUNNYRANKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PORT_PORT_BROKER_ID_IDX, Indexes.PORT_PORT_GAME_APP_ID_IDX, Indexes.PORT_PORT_PROJECT_ID_IDX, Indexes.PORT_PORT_VALUE_IDX, Indexes.PORT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PortRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_PORT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PortRecord> getPrimaryKey() {
        return Keys.KEY_PORT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PortRecord>> getKeys() {
        return Arrays.<UniqueKey<PortRecord>>asList(Keys.KEY_PORT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PortRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PortRecord, ?>>asList(Keys.PORT_BROKER_ID_FK, Keys.PORT_PROJECT_ID_FK, Keys.PORT_GAME_APP_ID_FK);
    }

    public Broker broker() {
        return new Broker(this, Keys.PORT_BROKER_ID_FK);
    }

    public Project project() {
        return new Project(this, Keys.PORT_PROJECT_ID_FK);
    }

    public Game game() {
        return new Game(this, Keys.PORT_GAME_APP_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Port as(String alias) {
        return new Port(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Port as(Name alias) {
        return new Port(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Port rename(String name) {
        return new Port(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Port rename(Name name) {
        return new Port(name, null);
    }
}
