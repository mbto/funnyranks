/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks.tables;


import com.github.mbto.funnyranks.common.model.funnyranks.Funnyranks;
import com.github.mbto.funnyranks.common.model.funnyranks.Indexes;
import com.github.mbto.funnyranks.common.model.funnyranks.Keys;
import com.github.mbto.funnyranks.common.model.funnyranks.enums.ProjectDatabaseServerTimezone;
import com.github.mbto.funnyranks.common.model.funnyranks.enums.ProjectLanguage;
import com.github.mbto.funnyranks.common.model.funnyranks.enums.ProjectMergeType;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.ProjectRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Project extends TableImpl<ProjectRecord> {

    private static final long serialVersionUID = -1736151225;

    /**
     * The reference instance of <code>funnyranks.project</code>
     */
    public static final Project PROJECT = new Project();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectRecord> getRecordType() {
        return ProjectRecord.class;
    }

    /**
     * The column <code>funnyranks.project.id</code>.
     */
    public final TableField<ProjectRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>funnyranks.project.name</code>.
     */
    public final TableField<ProjectRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>funnyranks.project.description</code>.
     */
    public final TableField<ProjectRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>funnyranks.project.language</code>. Language affects to country name in player_ip table (from MaxMind GeoLite2 database)
     */
    public final TableField<ProjectRecord, ProjectLanguage> LANGUAGE = createField("language", org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("en", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.github.mbto.funnyranks.common.model.funnyranks.enums.ProjectLanguage.class), this, "Language affects to country name in player_ip table (from MaxMind GeoLite2 database)");

    /**
     * The column <code>funnyranks.project.merge_type</code>.
     */
    public final TableField<ProjectRecord, ProjectMergeType> MERGE_TYPE = createField("merge_type", org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false).defaultValue(org.jooq.impl.DSL.inline("Nick", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.github.mbto.funnyranks.common.model.funnyranks.enums.ProjectMergeType.class), this, "");

    /**
     * The column <code>funnyranks.project.reg_datetime</code>.
     */
    public final TableField<ProjectRecord, LocalDateTime> REG_DATETIME = createField("reg_datetime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>funnyranks.project.database_hostport</code>.
     */
    public final TableField<ProjectRecord, String> DATABASE_HOSTPORT = createField("database_hostport", org.jooq.impl.SQLDataType.VARCHAR(260).nullable(false), this, "");

    /**
     * The column <code>funnyranks.project.database_schema</code>.
     */
    public final TableField<ProjectRecord, String> DATABASE_SCHEMA = createField("database_schema", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>funnyranks.project.database_username</code>.
     */
    public final TableField<ProjectRecord, String> DATABASE_USERNAME = createField("database_username", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>funnyranks.project.database_password</code>.
     */
    public final TableField<ProjectRecord, String> DATABASE_PASSWORD = createField("database_password", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>funnyranks.project.database_server_timezone</code>.
     */
    public final TableField<ProjectRecord, ProjectDatabaseServerTimezone> DATABASE_SERVER_TIMEZONE = createField("database_server_timezone", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).asEnumDataType(com.github.mbto.funnyranks.common.model.funnyranks.enums.ProjectDatabaseServerTimezone.class), this, "");

    /**
     * Create a <code>funnyranks.project</code> table reference
     */
    public Project() {
        this(DSL.name("project"), null);
    }

    /**
     * Create an aliased <code>funnyranks.project</code> table reference
     */
    public Project(String alias) {
        this(DSL.name(alias), PROJECT);
    }

    /**
     * Create an aliased <code>funnyranks.project</code> table reference
     */
    public Project(Name alias) {
        this(alias, PROJECT);
    }

    private Project(Name alias, Table<ProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private Project(Name alias, Table<ProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Project(Table<O> child, ForeignKey<O, ProjectRecord> key) {
        super(child, key, PROJECT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Funnyranks.FUNNYRANKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROJECT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_PROJECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectRecord>>asList(Keys.KEY_PROJECT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Project as(String alias) {
        return new Project(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Project as(Name alias) {
        return new Project(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Project rename(String name) {
        return new Project(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Project rename(Name name) {
        return new Project(name, null);
    }
}
