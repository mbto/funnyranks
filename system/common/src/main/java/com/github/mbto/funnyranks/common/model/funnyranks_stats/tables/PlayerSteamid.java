/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks_stats.tables;


import com.github.mbto.funnyranks.common.model.funnyranks_stats.FunnyranksStats;
import com.github.mbto.funnyranks.common.model.funnyranks_stats.Indexes;
import com.github.mbto.funnyranks.common.model.funnyranks_stats.Keys;
import com.github.mbto.funnyranks.common.model.funnyranks_stats.tables.records.PlayerSteamidRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerSteamid extends TableImpl<PlayerSteamidRecord> {

    private static final long serialVersionUID = 1264061271;

    /**
     * The reference instance of <code>funnyranks_stats.player_steamid</code>
     */
    public static final PlayerSteamid PLAYER_STEAMID = new PlayerSteamid();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerSteamidRecord> getRecordType() {
        return PlayerSteamidRecord.class;
    }

    /**
     * The column <code>funnyranks_stats.player_steamid.id</code>.
     */
    public final TableField<PlayerSteamidRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>funnyranks_stats.player_steamid.player_id</code>.
     */
    public final TableField<PlayerSteamidRecord, UInteger> PLAYER_ID = createField("player_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>funnyranks_stats.player_steamid.steamid64</code>.
     */
    public final TableField<PlayerSteamidRecord, Long> STEAMID64 = createField("steamid64", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>funnyranks_stats.player_steamid.steamid2</code>. Auto-generated SteamID format v2 - STEAM_0:X:YYYYYYYYYY - https://developer.valvesoftware.com/wiki/SteamID
     */
    public final TableField<PlayerSteamidRecord, String> STEAMID2 = createField("steamid2", org.jooq.impl.SQLDataType.VARCHAR(20), this, "Auto-generated SteamID format v2 - STEAM_0:X:YYYYYYYYYY - https://developer.valvesoftware.com/wiki/SteamID");

    /**
     * The column <code>funnyranks_stats.player_steamid.steamid3</code>. Auto-generated SteamID format v3 - [U:X:YYYYYYYYYY] - https://developer.valvesoftware.com/wiki/SteamID
     */
    public final TableField<PlayerSteamidRecord, String> STEAMID3 = createField("steamid3", org.jooq.impl.SQLDataType.VARCHAR(20), this, "Auto-generated SteamID format v3 - [U:X:YYYYYYYYYY] - https://developer.valvesoftware.com/wiki/SteamID");

    /**
     * The column <code>funnyranks_stats.player_steamid.reg_datetime</code>.
     */
    public final TableField<PlayerSteamidRecord, LocalDateTime> REG_DATETIME = createField("reg_datetime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>funnyranks_stats.player_steamid</code> table reference
     */
    public PlayerSteamid() {
        this(DSL.name("player_steamid"), null);
    }

    /**
     * Create an aliased <code>funnyranks_stats.player_steamid</code> table reference
     */
    public PlayerSteamid(String alias) {
        this(DSL.name(alias), PLAYER_STEAMID);
    }

    /**
     * Create an aliased <code>funnyranks_stats.player_steamid</code> table reference
     */
    public PlayerSteamid(Name alias) {
        this(alias, PLAYER_STEAMID);
    }

    private PlayerSteamid(Name alias, Table<PlayerSteamidRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerSteamid(Name alias, Table<PlayerSteamidRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PlayerSteamid(Table<O> child, ForeignKey<O, PlayerSteamidRecord> key) {
        super(child, key, PLAYER_STEAMID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return FunnyranksStats.FUNNYRANKS_STATS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLAYER_STEAMID_PLAYER_STEAMID_PLAYER_ID_IDX, Indexes.PLAYER_STEAMID_PLAYER_STEAMID_STEAMID2_IDX, Indexes.PLAYER_STEAMID_PLAYER_STEAMID_STEAMID3_IDX, Indexes.PLAYER_STEAMID_PLAYER_STEAMID_STEAMID64_IDX, Indexes.PLAYER_STEAMID_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PlayerSteamidRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_PLAYER_STEAMID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlayerSteamidRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_STEAMID_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlayerSteamidRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayerSteamidRecord>>asList(Keys.KEY_PLAYER_STEAMID_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PlayerSteamidRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PlayerSteamidRecord, ?>>asList(Keys.PLAYER_STEAMID_PLAYER_ID_FK);
    }

    public Player player() {
        return new Player(this, Keys.PLAYER_STEAMID_PLAYER_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerSteamid as(String alias) {
        return new PlayerSteamid(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PlayerSteamid as(Name alias) {
        return new PlayerSteamid(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerSteamid rename(String name) {
        return new PlayerSteamid(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerSteamid rename(Name name) {
        return new PlayerSteamid(name, null);
    }
}
