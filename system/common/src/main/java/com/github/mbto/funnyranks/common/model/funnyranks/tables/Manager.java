/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks.tables;


import com.github.mbto.funnyranks.common.model.funnyranks.Funnyranks;
import com.github.mbto.funnyranks.common.model.funnyranks.Indexes;
import com.github.mbto.funnyranks.common.model.funnyranks.Keys;
import com.github.mbto.funnyranks.common.model.funnyranks.enums.ManagerRole;
import com.github.mbto.funnyranks.common.model.funnyranks.tables.records.ManagerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Manager extends TableImpl<ManagerRecord> {

    private static final long serialVersionUID = 1345506178;

    /**
     * The reference instance of <code>funnyranks.manager</code>
     */
    public static final Manager MANAGER = new Manager();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManagerRecord> getRecordType() {
        return ManagerRecord.class;
    }

    /**
     * The column <code>funnyranks.manager.id</code>.
     */
    public final TableField<ManagerRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>funnyranks.manager.username</code>.
     */
    public final TableField<ManagerRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(31).nullable(false), this, "");

    /**
     * The column <code>funnyranks.manager.password</code>. https://www.browserling.com/tools/bcrypt
     */
    public final TableField<ManagerRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CHAR(60).nullable(false), this, "https://www.browserling.com/tools/bcrypt");

    /**
     * The column <code>funnyranks.manager.description</code>.
     */
    public final TableField<ManagerRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>funnyranks.manager.role</code>.
     */
    public final TableField<ManagerRecord, ManagerRole> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR(7).nullable(false).defaultValue(org.jooq.impl.DSL.inline("project", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.github.mbto.funnyranks.common.model.funnyranks.enums.ManagerRole.class), this, "");

    /**
     * The column <code>funnyranks.manager.active</code>.
     */
    public final TableField<ManagerRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>funnyranks.manager.project_ids</code>.
     */
    public final TableField<ManagerRecord, String> PROJECT_IDS = createField("project_ids", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>funnyranks.manager.reg_datetime</code>.
     */
    public final TableField<ManagerRecord, LocalDateTime> REG_DATETIME = createField("reg_datetime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>funnyranks.manager</code> table reference
     */
    public Manager() {
        this(DSL.name("manager"), null);
    }

    /**
     * Create an aliased <code>funnyranks.manager</code> table reference
     */
    public Manager(String alias) {
        this(DSL.name(alias), MANAGER);
    }

    /**
     * Create an aliased <code>funnyranks.manager</code> table reference
     */
    public Manager(Name alias) {
        this(alias, MANAGER);
    }

    private Manager(Name alias, Table<ManagerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Manager(Name alias, Table<ManagerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Manager(Table<O> child, ForeignKey<O, ManagerRecord> key) {
        super(child, key, MANAGER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Funnyranks.FUNNYRANKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MANAGER_MANAGER_USERNAME_UNIQUE, Indexes.MANAGER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ManagerRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_MANAGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ManagerRecord> getPrimaryKey() {
        return Keys.KEY_MANAGER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ManagerRecord>> getKeys() {
        return Arrays.<UniqueKey<ManagerRecord>>asList(Keys.KEY_MANAGER_PRIMARY, Keys.KEY_MANAGER_MANAGER_USERNAME_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Manager as(String alias) {
        return new Manager(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Manager as(Name alias) {
        return new Manager(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Manager rename(String name) {
        return new Manager(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Manager rename(Name name) {
        return new Manager(name, null);
    }
}
