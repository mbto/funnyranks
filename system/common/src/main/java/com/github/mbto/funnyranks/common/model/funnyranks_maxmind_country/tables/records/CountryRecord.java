/*
 * This file is generated by jOOQ.
 */
package com.github.mbto.funnyranks.common.model.funnyranks_maxmind_country.tables.records;


import com.github.mbto.funnyranks.common.model.funnyranks_maxmind_country.tables.Country;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountryRecord extends UpdatableRecordImpl<CountryRecord> implements Record4<UInteger, String, String, String> {

    private static final long serialVersionUID = -471809988;

    /**
     * Setter for <code>funnyranks_maxmind_country.country.geoname_id</code>.
     */
    public void setGeonameId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>funnyranks_maxmind_country.country.geoname_id</code>.
     */
    @NotNull
    public UInteger getGeonameId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>funnyranks_maxmind_country.country.emoji</code>.
     */
    public void setEmoji(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>funnyranks_maxmind_country.country.emoji</code>.
     */
    @Size(max = 2)
    public String getEmoji() {
        return (String) get(1);
    }

    /**
     * Setter for <code>funnyranks_maxmind_country.country.name_en</code>.
     */
    public void setNameEn(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>funnyranks_maxmind_country.country.name_en</code>.
     */
    @Size(max = 44)
    public String getNameEn() {
        return (String) get(2);
    }

    /**
     * Setter for <code>funnyranks_maxmind_country.country.name_ru</code>.
     */
    public void setNameRu(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>funnyranks_maxmind_country.country.name_ru</code>.
     */
    @Size(max = 41)
    public String getNameRu() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<UInteger, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<UInteger, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field1() {
        return Country.COUNTRY.GEONAME_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Country.COUNTRY.EMOJI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Country.COUNTRY.NAME_EN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Country.COUNTRY.NAME_RU;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component1() {
        return getGeonameId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getEmoji();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getNameEn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getNameRu();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value1() {
        return getGeonameId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getEmoji();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getNameEn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getNameRu();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CountryRecord value1(UInteger value) {
        setGeonameId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CountryRecord value2(String value) {
        setEmoji(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CountryRecord value3(String value) {
        setNameEn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CountryRecord value4(String value) {
        setNameRu(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CountryRecord values(UInteger value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CountryRecord
     */
    public CountryRecord() {
        super(Country.COUNTRY);
    }

    /**
     * Create a detached, initialised CountryRecord
     */
    public CountryRecord(UInteger geonameId, String emoji, String nameEn, String nameRu) {
        super(Country.COUNTRY);

        set(0, geonameId);
        set(1, emoji);
        set(2, nameEn);
        set(3, nameRu);
    }
}
